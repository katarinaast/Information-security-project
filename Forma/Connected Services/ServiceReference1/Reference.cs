//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Forma.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadFromFile", ReplyAction="http://tempuri.org/IService1/ReadFromFileResponse")]
        string ReadFromFile(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadFromFile", ReplyAction="http://tempuri.org/IService1/ReadFromFileResponse")]
        System.Threading.Tasks.Task<string> ReadFromFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteToFile", ReplyAction="http://tempuri.org/IService1/WriteToFileResponse")]
        void WriteToFile(string path, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteToFile", ReplyAction="http://tempuri.org/IService1/WriteToFileResponse")]
        System.Threading.Tasks.Task WriteToFileAsync(string path, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptDecryptRC4", ReplyAction="http://tempuri.org/IService1/EncryptDecryptRC4Response")]
        string EncryptDecryptRC4(string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptDecryptRC4", ReplyAction="http://tempuri.org/IService1/EncryptDecryptRC4Response")]
        System.Threading.Tasks.Task<string> EncryptDecryptRC4Async(string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptTea", ReplyAction="http://tempuri.org/IService1/EncryptTeaResponse")]
        string EncryptTea(string Data, string Key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptTea", ReplyAction="http://tempuri.org/IService1/EncryptTeaResponse")]
        System.Threading.Tasks.Task<string> EncryptTeaAsync(string Data, string Key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptTea", ReplyAction="http://tempuri.org/IService1/DecryptTeaResponse")]
        string DecryptTea(string Data, string Key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptTea", ReplyAction="http://tempuri.org/IService1/DecryptTeaResponse")]
        System.Threading.Tasks.Task<string> DecryptTeaAsync(string Data, string Key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptCBC", ReplyAction="http://tempuri.org/IService1/DecryptCBCResponse")]
        byte[] DecryptCBC(byte[] data, byte[] aesKey, byte[] initVec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptCBC", ReplyAction="http://tempuri.org/IService1/DecryptCBCResponse")]
        System.Threading.Tasks.Task<byte[]> DecryptCBCAsync(byte[] data, byte[] aesKey, byte[] initVec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptCBC", ReplyAction="http://tempuri.org/IService1/EncryptCBCResponse")]
        byte[] EncryptCBC(byte[] data, byte[] aesKey, byte[] initVec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptCBC", ReplyAction="http://tempuri.org/IService1/EncryptCBCResponse")]
        System.Threading.Tasks.Task<byte[]> EncryptCBCAsync(byte[] data, byte[] aesKey, byte[] initVec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptBMP", ReplyAction="http://tempuri.org/IService1/EncryptBMPResponse")]
        byte[] EncryptBMP(string path, byte[] key, byte[] vec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptBMP", ReplyAction="http://tempuri.org/IService1/EncryptBMPResponse")]
        System.Threading.Tasks.Task<byte[]> EncryptBMPAsync(string path, byte[] key, byte[] vec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptBMP", ReplyAction="http://tempuri.org/IService1/DecryptBMPResponse")]
        byte[] DecryptBMP(string path, byte[] key, byte[] vec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptBMP", ReplyAction="http://tempuri.org/IService1/DecryptBMPResponse")]
        System.Threading.Tasks.Task<byte[]> DecryptBMPAsync(string path, byte[] key, byte[] vec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProcessFileInParallel", ReplyAction="http://tempuri.org/IService1/ProcessFileInParallelResponse")]
        void ProcessFileInParallel(string inputFile, string outputFile, byte[] aesKey, byte[] initVec, int numThreads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProcessFileInParallel", ReplyAction="http://tempuri.org/IService1/ProcessFileInParallelResponse")]
        System.Threading.Tasks.Task ProcessFileInParallelAsync(string inputFile, string outputFile, byte[] aesKey, byte[] initVec, int numThreads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptDecryptEnigma", ReplyAction="http://tempuri.org/IService1/EncryptDecryptEnigmaResponse")]
        string EncryptDecryptEnigma(string plaintext, string key, string reflector, string plugboard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptDecryptEnigma", ReplyAction="http://tempuri.org/IService1/EncryptDecryptEnigmaResponse")]
        System.Threading.Tasks.Task<string> EncryptDecryptEnigmaAsync(string plaintext, string key, string reflector, string plugboard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateCRC", ReplyAction="http://tempuri.org/IService1/CalculateCRCResponse")]
        uint CalculateCRC(byte[] buf, int size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateCRC", ReplyAction="http://tempuri.org/IService1/CalculateCRCResponse")]
        System.Threading.Tasks.Task<uint> CalculateCRCAsync(byte[] buf, int size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptDecryptEnigmaParallel", ReplyAction="http://tempuri.org/IService1/EncryptDecryptEnigmaParallelResponse")]
        string EncryptDecryptEnigmaParallel(string plaintext, string key, string reflector, string plugboard, int numThreads, string inputFile, string outputFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptDecryptEnigmaParallel", ReplyAction="http://tempuri.org/IService1/EncryptDecryptEnigmaParallelResponse")]
        System.Threading.Tasks.Task<string> EncryptDecryptEnigmaParallelAsync(string plaintext, string key, string reflector, string plugboard, int numThreads, string inputFile, string outputFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptTeaParallel", ReplyAction="http://tempuri.org/IService1/EncryptTeaParallelResponse")]
        string EncryptTeaParallel(string Data, string Key, int numThreads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptTeaParallel", ReplyAction="http://tempuri.org/IService1/EncryptTeaParallelResponse")]
        System.Threading.Tasks.Task<string> EncryptTeaParallelAsync(string Data, string Key, int numThreads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptTeaParallel", ReplyAction="http://tempuri.org/IService1/DecryptTeaParallelResponse")]
        string DecryptTeaParallel(string Data, string Key, int numThreads);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptTeaParallel", ReplyAction="http://tempuri.org/IService1/DecryptTeaParallelResponse")]
        System.Threading.Tasks.Task<string> DecryptTeaParallelAsync(string Data, string Key, int numThreads);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Forma.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Forma.ServiceReference1.IService1>, Forma.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ReadFromFile(string path) {
            return base.Channel.ReadFromFile(path);
        }
        
        public System.Threading.Tasks.Task<string> ReadFromFileAsync(string path) {
            return base.Channel.ReadFromFileAsync(path);
        }
        
        public void WriteToFile(string path, string text) {
            base.Channel.WriteToFile(path, text);
        }
        
        public System.Threading.Tasks.Task WriteToFileAsync(string path, string text) {
            return base.Channel.WriteToFileAsync(path, text);
        }
        
        public string EncryptDecryptRC4(string input, string key) {
            return base.Channel.EncryptDecryptRC4(input, key);
        }
        
        public System.Threading.Tasks.Task<string> EncryptDecryptRC4Async(string input, string key) {
            return base.Channel.EncryptDecryptRC4Async(input, key);
        }
        
        public string EncryptTea(string Data, string Key) {
            return base.Channel.EncryptTea(Data, Key);
        }
        
        public System.Threading.Tasks.Task<string> EncryptTeaAsync(string Data, string Key) {
            return base.Channel.EncryptTeaAsync(Data, Key);
        }
        
        public string DecryptTea(string Data, string Key) {
            return base.Channel.DecryptTea(Data, Key);
        }
        
        public System.Threading.Tasks.Task<string> DecryptTeaAsync(string Data, string Key) {
            return base.Channel.DecryptTeaAsync(Data, Key);
        }
        
        public byte[] DecryptCBC(byte[] data, byte[] aesKey, byte[] initVec) {
            return base.Channel.DecryptCBC(data, aesKey, initVec);
        }
        
        public System.Threading.Tasks.Task<byte[]> DecryptCBCAsync(byte[] data, byte[] aesKey, byte[] initVec) {
            return base.Channel.DecryptCBCAsync(data, aesKey, initVec);
        }
        
        public byte[] EncryptCBC(byte[] data, byte[] aesKey, byte[] initVec) {
            return base.Channel.EncryptCBC(data, aesKey, initVec);
        }
        
        public System.Threading.Tasks.Task<byte[]> EncryptCBCAsync(byte[] data, byte[] aesKey, byte[] initVec) {
            return base.Channel.EncryptCBCAsync(data, aesKey, initVec);
        }
        
        public byte[] EncryptBMP(string path, byte[] key, byte[] vec) {
            return base.Channel.EncryptBMP(path, key, vec);
        }
        
        public System.Threading.Tasks.Task<byte[]> EncryptBMPAsync(string path, byte[] key, byte[] vec) {
            return base.Channel.EncryptBMPAsync(path, key, vec);
        }
        
        public byte[] DecryptBMP(string path, byte[] key, byte[] vec) {
            return base.Channel.DecryptBMP(path, key, vec);
        }
        
        public System.Threading.Tasks.Task<byte[]> DecryptBMPAsync(string path, byte[] key, byte[] vec) {
            return base.Channel.DecryptBMPAsync(path, key, vec);
        }
        
        public void ProcessFileInParallel(string inputFile, string outputFile, byte[] aesKey, byte[] initVec, int numThreads) {
            base.Channel.ProcessFileInParallel(inputFile, outputFile, aesKey, initVec, numThreads);
        }
        
        public System.Threading.Tasks.Task ProcessFileInParallelAsync(string inputFile, string outputFile, byte[] aesKey, byte[] initVec, int numThreads) {
            return base.Channel.ProcessFileInParallelAsync(inputFile, outputFile, aesKey, initVec, numThreads);
        }
        
        public string EncryptDecryptEnigma(string plaintext, string key, string reflector, string plugboard) {
            return base.Channel.EncryptDecryptEnigma(plaintext, key, reflector, plugboard);
        }
        
        public System.Threading.Tasks.Task<string> EncryptDecryptEnigmaAsync(string plaintext, string key, string reflector, string plugboard) {
            return base.Channel.EncryptDecryptEnigmaAsync(plaintext, key, reflector, plugboard);
        }
        
        public uint CalculateCRC(byte[] buf, int size) {
            return base.Channel.CalculateCRC(buf, size);
        }
        
        public System.Threading.Tasks.Task<uint> CalculateCRCAsync(byte[] buf, int size) {
            return base.Channel.CalculateCRCAsync(buf, size);
        }
        
        public string EncryptDecryptEnigmaParallel(string plaintext, string key, string reflector, string plugboard, int numThreads, string inputFile, string outputFile) {
            return base.Channel.EncryptDecryptEnigmaParallel(plaintext, key, reflector, plugboard, numThreads, inputFile, outputFile);
        }
        
        public System.Threading.Tasks.Task<string> EncryptDecryptEnigmaParallelAsync(string plaintext, string key, string reflector, string plugboard, int numThreads, string inputFile, string outputFile) {
            return base.Channel.EncryptDecryptEnigmaParallelAsync(plaintext, key, reflector, plugboard, numThreads, inputFile, outputFile);
        }
        
        public string EncryptTeaParallel(string Data, string Key, int numThreads) {
            return base.Channel.EncryptTeaParallel(Data, Key, numThreads);
        }
        
        public System.Threading.Tasks.Task<string> EncryptTeaParallelAsync(string Data, string Key, int numThreads) {
            return base.Channel.EncryptTeaParallelAsync(Data, Key, numThreads);
        }
        
        public string DecryptTeaParallel(string Data, string Key, int numThreads) {
            return base.Channel.DecryptTeaParallel(Data, Key, numThreads);
        }
        
        public System.Threading.Tasks.Task<string> DecryptTeaParallelAsync(string Data, string Key, int numThreads) {
            return base.Channel.DecryptTeaParallelAsync(Data, Key, numThreads);
        }
    }
}
